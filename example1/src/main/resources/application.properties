server.port=8080

# 配置开关，默认为true，如果使用Java API方式则修改为false
spring.shardingsphere.enabled=true

# 定义数据源名称，多个数据源则用逗号分开
spring.shardingsphere.datasource.name=t1
spring.shardingsphere.datasource.t1.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.t1.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.t1.jdbc-url=jdbc:mysql://localhost:3306/db_order?useUnicode=true&characterEncoding=UTF-8&allowMultiQueries=true&rewriteBatchedStatements=true&useSSL=true&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true
spring.shardingsphere.datasource.t1.username=root
spring.shardingsphere.datasource.t1.password=123456

# 配置t_order表主键order_id生成策略（这里说明下order_id不能在数据库中设置自增了）
spring.shardingsphere.sharding.tables.t_order.key-generator.column=order_id
spring.shardingsphere.sharding.tables.t_order.key-generator.type=SNOWFLAKE

# 指定表数据分布情况，即哪些表需要分表，写法上例如->{0..2}
spring.shardingsphere.sharding.tables.t_order.actual-data-nodes=t1.t_order_$->{1..2}

# 指定哪一列作为分表策略，这里我们选择了order_id
spring.shardingsphere.sharding.tables.t_order.table-strategy.inline.sharding-column=order_id
# 具体的分表路由策略：order_id 值为奇数插入到 t_order_2 表，为偶数插入到 t_order_1 表
spring.shardingsphere.sharding.tables.t_order.table-strategy.inline.algorithm-expression=t_order_$->{order_id%2+1}

# 打开 sql 输出日志
spring.shardingsphere.props.sql.show = true

